<?php
/**
 * @file
 * Contains lifafa_store.module.
 */
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
//use Drupal\lifafa_store\Controller\LifafaStoreController;

/**
 * Implements hook_help().
 */
function lifafa_store_help($route_name, RouteMatchInterface $route_match) {
	switch ($route_name) {
			// Main module help for the lifafa_store module.
			
		case 'help.page.lifafa_store':
			$output = '';
			$output.= '<h3>' . t('About') . '</h3>';
			$output.= '<p>' . t('this is lifafa store custom module') . '</p>';
			return $output;
		default:
	}
}
/**
 * Implements hook_theme().
 */
//function lifafa_store_theme() {
//  return [
//    'lifafa_store' => [
//      'render element' => 'children',
//    ],
//  ];
//}
function lifafa_store_theme($existing, $type, $theme, $path) {
	//    $theme['store_page'] = [
	//      //'variables' => ['name' => NULL],
	//      'template' => 'storepage'
	//    ];
	//
	//    return $theme;
	//
	return ['storepage' => ['variables' => ['storedata' => NULL], ], 'wellbeing_template' => ['variables' => ['storedata' => NULL], ], 'page_not_found' => ['variables' => ['storedata' => NULL], ], 'sendCustomerEmail' => ['variables' => ['given_name' => NULL, 'title' => NULL, 'dynamic_key2' => NULL], ], 'storelogoutpage' => ['variables' => ['storedata' => NULL], ], ];
}
function getLogoutUrl() {
	global $base_url;
	$logoutUrl = $base_url . '/user/logout';
	$current = \Drupal::currentUser();
	if (!empty($current->id())) {
		$storeId = getStoreIdFromSession();
		$logoutUrl = $base_url . '/user/logout?destination=' . $storeId . '/home/';
	}
	return $logoutUrl;
}
// Read some temporary data
function getStoreUrl() {
	global $base_url;
	$store_url = \Drupal::config('lifafa_config.lifafaconfig')->get('store_url');
	$sid = getStoreIdFromSession();
	$url = parse_url($base_url, PHP_URL_HOST);
	$storeUrl = $store_url . $sid . '/myaccount ';
	return $storeUrl;
}
function getStoreHomeUrl() {
	global $base_url;
	$store_url = \Drupal::config('lifafa_config.lifafaconfig')->get('store_url');
	$sid = getStoreIdFromSession();
	$url = parse_url($base_url, PHP_URL_HOST);
	$storeUrl = $base_url . '/store/' . $sid . '/home ';
	return $storeUrl;
}
function getGCMUrl() {
	global $base_url;
	$store_url = \Drupal::config('lifafa_config.lifafaconfig')->get('store_url');
	$sid = getStoreIdFromSession();
	$url = parse_url($base_url, PHP_URL_HOST);
	//$storeUrl = $store_url.$sid.'-01/gcm';
	$storeUrl = $store_url . $sid;
	if (empty($sid)) {
		$storeUrl = '';
	}
	return $storeUrl;
}
function getStoreBaseUrl() {
	global $base_url;
	$store_url = \Drupal::config('lifafa_config.lifafaconfig')->get('store_url');
	//$sid = getStoreIdFromSession();
	//$url = parse_url($base_url, PHP_URL_HOST);
	//$storeUrl = $store_url.$sid.'-01/gcm';
	$storeUrl = $store_url;
	return $storeUrl;
}
function getSelectStoreId() {
	$currentStore = '';
	if (\Drupal::currentUser()->isAnonymous()) {
		$node = \Drupal::routeMatch()->getParameter('node');
		if (!empty($node) && $node->getType() == 'customer_store') {
			if ($node instanceof \Drupal\node\NodeInterface) {
				$currentStore = $node->field_store_id->value;
			}
		}
	} else {
		return getStoreIdFromSession();
	}
	return $currentStore;
}
function getStoreIdFromSession() {
	$tempstore = \Drupal::service('user.private_tempstore')->get('lifafa_store');
	$sid = $tempstore->get('storeTerminalId');
	return $sid;
}
function getStoreUserData() {
	$tempstore = \Drupal::service('user.private_tempstore')->get('lifafa_store');
	$sid = $tempstore->get('userData');
	return $sid;
}
function getCurrentStoreUrl() {
	global $base_url;
	$store_url = \Drupal::config('lifafa_config.lifafaconfig')->get('store_url');
	$sid = getStoreIdFromSession();
	$url = parse_url($base_url, PHP_URL_HOST);
	$storeUrl = '';
	if (!empty($sid)) {
		$storeUrl = $base_url . '/store/' . $sid;
	}
	return $storeUrl;
}
/**
 * Implements hook_form_alter().
 */
function lifafa_store_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
	if ($form_id == 'views_exposed_form' && ($form['#id'] = 'views-exposed-form-perk-listing-page-1' || $form['#id'] = 'views-exposed-form-partner-offers-page-1')) {
		$form['field_perk_category_target_id']['#options']['All'] = 'Select Category';
		$form['field_perk_location_target_id']['#options']['All'] = 'Select Location';
	}

	if (isset($form['#id']) && $form['#id'] == 'credit-note-form') {

		$userdata = getStoreUserData();
		$given_name = $userdata["given_name"];
		$family_name = $userdata["family_name"];
		$email = $userdata["email"];
		$number = $userdata["mobileNumber"];
		$form['elements']['first_name']['#value'] = $given_name;
		$form['elements']['last_name']['#value'] = $family_name;
		$form['elements']['email_address']['#value'] = $email;
		$form['elements']['phone_number']['#value'] = $number;
	}

	if (isset($form['#id']) && $form['#id'] == 'flight-hotel-contact-form') {

		if (\Drupal::currentUser()->isAuthenticated()) {

			if(!isset($_SESSION['idToken'])) {
				return '';
			}

			$idToken = $_SESSION['idToken'];
			if (empty($idToken)) {
				return '';
			}
			$tokenArray = explode(".", $idToken);
			if (!isset($tokenArray[1])) {
				return null;
			}
			$parsedJwt = base64_decode($tokenArray[1]);
			if (!$parsedJwt) {
				return null;
			}
			$userDetailsArray = json_decode($parsedJwt, true);
			if (!$userDetailsArray) {
				return null;
			}
			$name = $userDetailsArray["name"];
			$company_name = $userDetailsArray['companyName'];
			$email = $userDetailsArray["email"];
			$number = $userDetailsArray["mobileNumber"];
		}

		$form['elements']['first_name']['#value'] = $name;
		$form['elements']['email_address']['#value'] = $email;
		$form['elements']['phone_number']['#value'] = $number;
		$form['elements']['company_name']['#value'] = $company_name;		
	}

	if ($form_id == 'webform_submission_flight_hotel_contact_node_251_add_form') {
		if (\Drupal::currentUser()->isAuthenticated()) {
			$idToken = $_SESSION['idToken'];
			if (empty($idToken)) {
				return '';
			}
			$tokenArray = explode(".", $idToken);
			if (!isset($tokenArray[1])) {
				return null;
			}
			$parsedJwt = base64_decode($tokenArray[1]);
			if (!$parsedJwt) {
				return null;
			}
			$userDetailsArray = json_decode($parsedJwt, true);
			if (!$userDetailsArray) {
				return null;
			}
			$name = $userDetailsArray["name"];
			$company_name = $userDetailsArray['companyName'];
			$email = $userDetailsArray["email"];
			$number = $userDetailsArray["mobileNumber"];
		}
		$form['elements']['first_name']['#value'] = $name;
		$form['elements']['email_address']['#value'] = $email;
		$form['elements']['phone_number']['#value'] = $number;
		$form['elements']['company_name']['#value'] = $company_name;
	}
}
/**
 * Implements hook_views_query_alter().
 */
function lifafa_store_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
	if (($view->id() == 'perk_listing' || $view->id() == 'partner_offers') && $view->current_display == 'block_1') {
		// Traverse through the 'where' part of the query.
		foreach ($query->where as & $condition_group) {
			foreach ($condition_group['conditions'] as & $condition) {
				if ($condition['field'] == 'node__field_store.field_store_target_id = :node__field_store_field_store_target_id' || $condition['field'] == 'node__field_store.field_store_target_id = :node__field_store_field_store_target_id1') {
					$storeId = getStoreIdFromSession();
					$data = Drupal\lifafa_store\Controller\LifafaStoreController::getStoreData($storeId);
					$field = 'node__field_store.field_store_target_id';
					$value = $data['id'];
					$operator = '=';
					// unset($query->where[0]['conditions'][2]);
					$query->where[0]['conditions'][0] = ["field" => $field, "value" => $value, "operator" => $operator, ];
				}
			}
		}
	}
	if (($view->id() == 'perk_listing' || $view->id() == 'partner_offers') && $view->current_display == 'page_1') {
		foreach ($query->where as & $condition_group) {
			foreach ($condition_group['conditions'] as & $condition) {
				$storeId = getStoreIdFromSession();
				$storeId;
				$data = Drupal\lifafa_store\Controller\LifafaStoreController::getStoreData($storeId);
				$field = 'node__field_store.field_store_target_id';
				$value = $data['id'];
				$operator = '=';
				$query->where[1]['conditions'][2] = ["field" => $field, "value" => $value, "operator" => $operator, ];
			}
		}
	}
	if (($view->id() == 'perk_listing' || $view->id() == 'partner_offers') && $view->current_display == 'block_2') {
		foreach ($query->where as & $condition_group) {
			foreach ($condition_group['conditions'] as & $condition) {
				$storeId = getStoreIdFromSession();
				$storeId;
				$data = Drupal\lifafa_store\Controller\LifafaStoreController::getStoreData($storeId);
				$field = 'node__field_store.field_store_target_id';
				$value = $data['id'];
				$operator = '=';
				$query->where[1]['conditions'][2] = ["field" => $field, "value" => $value, "operator" => $operator, ];
			}
		}
	}
	if (($view->id() == 'member_benefits') && $view->current_display == 'block_1') {
		$node = \Drupal::routeMatch()->getParameter('node');
		$storeId = $node->field_store_id->value;
		foreach ($query->where as & $condition_group) {
			foreach ($condition_group['conditions'] as & $condition) {
				//$storeId = getStoreIdFromSession();
				$data = Drupal\lifafa_store\Controller\LifafaStoreController::getStoreData($storeId);
				$field = 'node__field_store.field_store_target_id';
				$value = $data['id'];
				$operator = '=';
				$query->where[1]['conditions'][2] = ["field" => $field, "value" => $value, "operator" => $operator, ];
			}
		}
	}
}
function getFileUrl($fid) {
	if (empty($fid)) {
		return "";
	}
	try {
		$file = \Drupal\file\Entity\File::load($fid);
		$path = $file->getFileUri();
		$mainImageurl = \Drupal\Core\Url::fromUri(file_create_url($path), ['https' => 
			!empty(getenv('APP_ENV')) ? true : false
		])->toString();
		return $mainImageurl;
	}
	catch(Exception $ex) {
	}
}
/**
 * Implements hook_mail().
 */
function lifafa_store_mail($key, &$message, $params) {
	$options = array('langcode' => $message['langcode'],);
	switch ($key) {
		case 'thanks_customer_perk':
			$message['headers'] = ['content-type' => 'text/html'];
			$message['from'] = \Drupal::config('system.site')->get('mail');
			$message['subject'] = t('Perk Request | @title', array('@title' => $params['node_title']), $options);
			$message['body'][] = $params['message'];
		break;
		case 'lifafa_team_perk':
			$message['from'] = \Drupal::config('system.site')->get('mail');
			$message['subject'] = t('Perk Request | @title ', array('@title' => $params['node_title']), $options);
			$message['body'][] = $params['message'];
		break;
	}
}
